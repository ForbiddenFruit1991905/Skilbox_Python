# Задача 1. Опять налоги.
# У правительства одной из стран есть бухгалтерская программа, которая суммирует
# налоги её граждан, компаний плюс НДС с товаров. Страна развивалась, суммарные
# налоги увеличивались, и бухгалтеры заметили, что после добавления к общей сумме
# налогов некого НДС от какого-то продукта общая сумма перестала меняться…
# Нужно помочь бухгалтерам: напишите функцию, на вход которой подаются два числа —
# общая сумма налога tax и новый налог new_tax, который нужно добавить к общей сумме.
# Функция должна проверять, изменится ли показатель степени e при сложении двух чисел.
# Пример 1:
# Введите бюджет страны: 1.2e-12
# Новые поступления (налог): 1.2e1
# Результат: Бюджет увеличится
# Пример 2:
# Введите бюджет страны: 1.23e12
# Новые поступления (налог): 1.2e1
# Результат: Бюджет не изменится
# Подсказка: возведение в десятичный логарифм используется для определения порядка числа в научной
# записи (экспоненциальной форме), когда числа представлены в виде числа умножить на 10 в степени.
# Путем вычисления десятичного логарифма числа мы можем определить, на сколько десятков нужно сдвинуть
# десятичную точку, чтобы получить исходное число. Это удобно для сравнения порядков и понимания изменений
# в числах, особенно в случаях, когда числа представлены в экспоненциальной форме.

# import math
#
# def change_budget_with_tax(tax, new_tax):
#     total = tax + new_tax
#     e_tax = math.floor(math.log10(tax))
#     e_total = math.floor(math.log10(total))
#     if e_tax != e_total:
#         print("Бюджет изменится")
#     else:
#         print("Бюджет не изменится")
#
# prime_tax = float(input("Введите бюджет страны: "))
# new_tax_to_add = float(input("Новые поступления (налог): "))
# change_budget_with_tax(prime_tax, new_tax_to_add)

# Задача 2. Сравнение.
# Так как в Python операции с вещественными числами могут давать неожиданные результаты (в частности, 0.1 + 0.2
# не будет в точности равняться 0.3), стоит задача с этим как-то справляться.
# Напишите функцию eqv, которая принимает три числа и затем сравнивает сумму первых двух чисел с третьим с
# определённой степенью точности: до 15-го знака после точки. Если равенство выполняется, то функция возвращает
# True, иначе возвращает False.
# Пример 1:
# Введите первое число: 1.1
# Введите второе число: 2.2
# Введите третье число: 3.3
# True
# Пример 2:
# Введите первое число: 1e-14
# Введите второе число: 1e-14
# Введите третье число: 3e-14
# False

# Заметка для себя (пример для разбора):
# num = 9.3256954
# count = 0
# while num != int(num):
#     count += 1
#     num *= 10
# print(count)

def eqv(num_1, num_2, num_3):
    summ = num_1 + num_2
    return abs(summ - num_3) <= 1e-15

first_num = float(input("Введите первое число: "))
second_num = float(input("Введите второе число: "))
third_num = float(input("Введите третье число: "))
print(eqv(first_num, second_num, third_num))