# Задача 1. Как дела?
# Вася совсем заскучал на работе и решил побаловаться с кодом проекта. Он написал надоедливый декоратор,
# который при вызове декорируемой функции спрашивает у пользователя: «Как дела?», вне зависимости от ответа
# пишет что-то вроде: «А у меня не очень!» — и только потом запускает саму функцию. Правда, после такой выходки
# Васю чуть не уволили с работы.
# Реализуйте такой же декоратор и проверьте его работу на нескольких функциях.
# Пример кода:
# from functools import wraps
# from typing import Callable, Any


# def how_are_you(func: Callable) -> Callable:
#     @wraps(func)
#     def wrapper(*args, **kwargs) -> Any:
#         answer = input('Как дела? ')
#         print(f'Ты ответил: {answer}')
#         print('А у меня не очень! Ладно, держи свою функцию.')
#         return func(*args, **kwargs)
#     return  wrapper
#
#
# @how_are_you
# def test():
#     print('<Тут что-то происходит...>')
#
# test()

# Результат:
# Как дела? Хорошо.
# А у меня не очень! Ладно, держи свою функцию.
# <Тут что-то происходит...>


# Задача 2. Замедление кода
# В программировании иногда возникает ситуация, когда работу функции нужно замедлить. Типичный
# пример — функция, которая постоянно проверяет, изменились ли данные на веб-странице или её код.
# Реализуйте декоратор, который перед выполнением декорируемой функции ждёт несколько секунд.
# Чтобы посмотреть решение от нашего эксперта, нажмите на кнопку ниже.

import time
from typing import Callable, Any


def wait_before(seconds: float) -> Callable:
    def decorator(func: Callable) -> Callable:
        def wrapper(*args, **kwargs) -> Any:
            print(f'Ждём {seconds} секунд(ы) перед вызовом функции {func.__name__}...')
            time.sleep(seconds)
            return func(*args, **kwargs)
        return wrapper
    return decorator


@wait_before(3)
def some_function():
    print("Функция выполнена!")

some_function()

# Вариант от скилбокса:
from functools import wraps
from time import sleep
from typing import Callable, Any

def slowdown_2s(func: Callable) -> Callable:
    """
    Декоратор, который замедляет выполнение декорируемой функции на 2 секунды.
    Args:
        func: Функция, которую нужно декорировать.

    Returns: Ссылка на функцию-обёртку.
    """
    @wraps(func)
    def wrapper(*args, **kwargs) -> Any:
        """
        Обёртка для декорируемой функции, осуществляющая задержку перед вызовом.
        Задерживает выполнение на 2 секунды, а затем вызывает оригинальную функцию
        с переданными ей аргументами.
        Args:
            *args: Позиционные аргументы, передаваемые в декорируемую функцию.
            **kwargs: Именованные аргументы, передаваемые в декорируемую функцию.
        Returns: Результат, возвращаемый декорируемой функцией.
        """
        sleep(2)
        result = func(*args, **kwargs)
        return result
    return wrapper