# Задача 1. Склады
# У мебельного магазина есть два склада, на которых хранятся разные категории
# товаров по парам «название — количество».
# Магазин решил сократить аренду и скинуть все товары в большой склад (big_storage).
# После этого нас попросили реализовать поиск по товарам.
# Напишите программу, которая объединяет оба словаря в один (в big_storage), затем
# запрашивает у пользователя название товара и выводит на экран его количество. Если
# такого товара нет, то выводит об этом ошибку. Для получения значения используйте метод get.

# small_storage = {
#     'гвозди': 5000,
#     'шурупы': 3040,
#     'саморезы': 2000
# }
#
# big_storage = {
#     'доски': 1000,
#     'балки': 150,
#     'рейки': 600
# }
#
# big_storage.update(small_storage)
# for item in big_storage:
#     print(item, ":", big_storage[item])
# item = input('Введите название товара: ')
# if item in big_storage:
#     print(big_storage.get(item))
# else:
#     print("Ошибка: такого товара нет")

# Задача 2. Кризис фруктов
# Мы работаем в одной небольшой торговой компании, где все данные о продажах фруктов
# за год сохранены в словаре в виде пар «название фрукта — доход».
# В компании наступил небольшой кризис, и нам поручено провести небольшой анализ дохода.
# Напишите программу, которая находит общий доход, затем выводит фрукт с минимальным доходом
# и удаляет его из словаря. Выведите итоговый словарь на экран.
# Результат работы программы:
# Общий доход за год составил 35419.34 рублей
# Самый маленький доход у grapefruit. Он составляет 300.4 рублей
# Итоговый словарь: {'apple': 5600.2, 'orange': 3500.45, 'banana': 5000.0, 'bergamot': 3700.56,
# 'durian': 5987.23, 'peach': 10000.5, 'pear': 1020.0, 'persimmon': 310.0}

# incomes = {
#     'apple': 5600.20,
#     'orange': 3500.45,
#     'banana': 5000.00,
#     'bergamot': 3700.56,
#     'durian': 5987.23,
#     'grapefruit': 300.40,
#     'peach': 10000.50,
#     'pear': 1020.00,
#     'persimmon': 310.00,
# }
#
# summ = 0
# min_price_fruit = incomes.keys()
# min_price = float('inf')
# for fruit, price in incomes.items():
#     summ += price
#     if min_price > price:
#         min_price = price
#         min_price_fruit = fruit
#
# incomes.pop(min_price_fruit)
#
# print(f'Общий доход за год составил {summ}')
# print(f'Самый маленький доход у {min_price_fruit}. Он составляет {min_price} рублей')
# print('Итоговый словарь:\n')
# for fruit, price in incomes.items():
#     print(f'{fruit} : {price}')

# Вариант от скилбокса
# def get_value(x):
#     return x[1]
#
# result_sum = sum(incomes.values())
# min_name, min_value = min(incomes.items(), key=get_value)
# print(result_sum, min_name, min_value)

# Задача 3. Гистограмма частоты
# Лингвистам нужно собрать данные о частоте букв в тексте, исходя из этих данных будет
# строиться гистограмма частоты букв.
# Напишите программу, которая получает сам текст и считает, сколько раз в строке встречается
# каждый символ. На экран нужно вывести содержимое в виде таблицы, отсортированное по алфавиту,
# а также максимальное значение частоты.
# Пример:
# Введите текст: Здесь что-то написано
#   : 2
# - : 1
# З : 1
# а : 2
# д : 1
# е : 1
# и : 1
# н : 2
# о : 3
# п : 1
# с : 2
# т : 2
# ч : 1
# ь : 1
# Максимальная частота: 3

def get_hist(some_string):
    my_hist = dict()
    for letter in some_string:
        if letter in my_hist:
            my_hist[letter] += 1
        else:
            my_hist[letter] = 1

    return my_hist

text = input("Введите текст: ").lower()
result = get_hist(text)
for key, value in sorted(result.items()):
    print(f'{key} : {value}')

print(f'Максимальная частота: {max(result.values())}')