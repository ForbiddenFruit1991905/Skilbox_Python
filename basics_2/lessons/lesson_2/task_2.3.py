# Задача 1. Текстовый редактор: возвращение.
# Мы продолжаем участвовать в разработке нового текстового редактора и
# делать жизнь обычных пользователей чуть лучше. В этот раз у нас стоит
# задача сделать фишку с поиском и заменой символов в выделенной строчке.
# Например, человек что-то перечислял в тексте, но ошибся и вместо точек
# с запятой использовал двоеточия. Лингвисты негодуют.
# Пользователь вводит строку S. Напишите программу, которая заменяет в строке
# все двоеточия (:) на точки с запятой (;). Также подсчитайте количество замен
# и выведите ответ на экран (и новую строку тоже). Для решения используйте список.
# Пример:
# Введите строку: гвозди:шурупы:гайки
# Исправленная строка: гвозди;шурупы;гайки
# Кол-во замен: 2

# user_txt = list(input("Введите строку: "))
# count = 0
# new_user_txt = []
#
# for symbol in user_txt:
#     if symbol == ":":
#         symbol = ";"
#         count += 1
#         new_user_txt.append(symbol)
#     else:
#         new_user_txt.append(symbol)
#
# print("Кол-во замен:", count)
# print("Исправленная строка: ", end="")
# for i in new_user_txt:
#     print(i, end="")

# Задача 2. Соседи.
# Дана строка S и номер позиции символа в строке. Напишите программу, которая выводит
# соседей этого символа и сообщение о количестве таких же символов среди этих соседей:
# их нет, есть ровно один или есть два таких же.
# Пример 1:
# Введите строку: abbc
# Номер символа: 3
# Символ слева: b
# Символ справа: c
# Есть ровно один такой же символ.
# Пример 2:
# Введите строку: abсd
# Номер символа: 3
# Символ слева: b
# Символ справа: d
# Таких же символов нет.

# user_txt =  list(input("Введите строку: "))
# number_of_symbol = int(input("Номер символа: "))
# count = 0
#
# if number_of_symbol - 1 > 0 and number_of_symbol < len(user_txt):
#         print(f'Символ слева: {user_txt[number_of_symbol - 2]}\nСимвол справа: {user_txt[number_of_symbol]}')
# if user_txt[number_of_symbol - 1] == user_txt[number_of_symbol - 2]:
#     count += 1
# if user_txt[number_of_symbol - 1] == user_txt[number_of_symbol]:
#     count += 1
# if count == 1:
#     print("Есть ровно один такой же символ.")
# elif count == 2:
#     print("Есть ровно два таких же символа.")
# else:
#     print("Таких же символов нет.")

# Задача 3. Улучшенная лингвистика.
# Мы уже писали программу для лингвистов, которая считала количество определённых букв в тексте.
# Теперь эту программу нужно улучшить. Есть список из трёх слов, которые вводит пользователь. Затем
# вводится сам текст произведения строго по словам. Текст вводится до тех пор, пока не встретится слово
# end. Напишите программу, которая посчитает, сколько раз слова пользователя встречаются в тексте.
# Пример:
# Введите 1 слово: я
# Введите 2 слово: год
# Введите 3 слово: лучший
# Слово из текста: этот
# Слово из текста: год
# Слово из текста: -
# Слово из текста: лучший
# Слово из текста: год
# Подсчёт слов в тексте
# я: 0
# год: 2
# лучший: 1

txt = []

for i in range(3):
    user_txt = input(f"Введите {i+1} слово: ")
    txt.append(user_txt)

new_txt = []
print_text = input("Слово из текста: ")
while print_text != "end":
    new_txt.append(print_text)
    print_text = input("Слово из текста: ")

for value in txt:
    count = 0
    for val in new_txt:
        if value == val:
            count += 1
    print(value, ":", count)

# Другой вариант:
# words_list = []
# counts = [0, 0, 0]
#
# for i in range(3):
#     print("Введите", i + 1, "слово", end=' ')
#     word = input()
#     words_list.append(word)
#
# text = input("Слово из текста: ")
# while text != "end":
#     for index in range(3):
#         if words_list[index] == text:
#             counts[index] += 1
#     text = input("Слово из текста: ")
#
# print("Подсчёт слов в тексте")
# for i in range(3):
#     print(words_list[i], ':', counts[i])